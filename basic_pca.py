# -*- coding: utf-8 -*-
"""Basic PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EGeYLk0s6hrj3r6q2GYKoRAOn9V-ov-6
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('max_rows', 99999)
pd.set_option('max_colwidth', 400)
pd.describe_option('max_colwidth')

df = pd.read_excel(r'/content/ChM_SO_2021_TrialStatistics.xlsx')

columns=df.columns.to_list()
columns

df.info()

cat_features=df.select_dtypes(exclude='number').columns
num_features=df.select_dtypes(include=['int64', 'float64']).columns

df.replace('-', 0, inplace=True)

y= df['Group_Type']

df.drop(['Experiment','Group','Group_Type','Animal','Time_Point','Time_Point_Description','Trial','Group_Description', 'Trial_Description'], axis = 1, inplace=True)

df.isna().sum()

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, OrdinalEncoder, OneHotEncoder, MinMaxScaler

oe = OrdinalEncoder()
ohe = OneHotEncoder()
X_oe=oe.fit_transform(df)
X_ohe=ohe.fit_transform(df)

scaler=StandardScaler()

X_scaled=scaler.fit_transform(X_oe)

pca= PCA()

X_pca = pca.fit_transform(X_scaled)

"""# Ordinal Encoding 

"""

sns.scatterplot(X_pca[:,0], X_pca[:,1], s=20, cmap='coolwarm')
plt.title('Scatterplot of two first features (X1 and X2)')
plt.show()

"""How much principal components do we need to explain variance in data? """

np.where(np.cumsum(pca.explained_variance_ratio_) > 0.9)[0][0]+1

print(f'37 principal components explain {round(np.cumsum(pca.explained_variance_ratio_[:37])[-1],2)*100}% of variance')
plt.figure(figsize=(10, 7))
plt.plot(np.cumsum(pca.explained_variance_ratio_), lw=3, color="g")
plt.xlabel("Number of components")
plt.ylabel("Total explained variance")
plt.axvline(x=37)
plt.axhline(y=0.9)
plt.xlim(0, 50)
plt.yticks(np.arange(0, 1.1, 0.1))
plt.show()

"""# OHE and Standard Encoding"""

X_ohe.shape

"""#OE and Min Max scaling"""

mm_scaler=MinMaxScaler()

X_scaled=scaler.fit_transform(X_oe)

pca_mm= PCA()

X_pca_mm = pca_mm.fit_transform(X_scaled)

sns.scatterplot(X_pca_mm[:,0], X_pca_mm[:,1], s=20, cmap='coolwarm')
plt.title('Scatterplot of two first features (X1 and X2)')
plt.show()

np.where(np.cumsum(pca.explained_variance_ratio_) > 0.9)[0][0]+1

print(f'37 principal components explain {round(np.cumsum(pca_mm.explained_variance_ratio_[:37])[-1],2)*100}% of variance')
plt.figure(figsize=(10, 7))
plt.plot(np.cumsum(pca_mm.explained_variance_ratio_), lw=3, color="g")
plt.xlabel("Number of components")
plt.ylabel("Total explained variance")
plt.axvline(x=37)
plt.axhline(y=0.9)
plt.xlim(0, 50)
plt.yticks(np.arange(0, 1.1, 0.1))
plt.show()

